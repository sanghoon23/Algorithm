/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//@ Programmers Algorithm - 2020 / 05 / 22
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 문제
- 문제이름 : 여행 경로

주어진 항공권을 모두 이용하여 여행경로를 짜려고 합니다. 항상 ICN 공항에서 출발합니다.

항공권 정보가 담긴 2차원 배열 tickets가 매개변수로 주어질 때, 
방문하는 공항 경로를 배열에 담아 return 하도록 solution 함수를 작성해주세요.

제한사항
모든 공항은 알파벳 대문자 3글자로 이루어집니다.
주어진 공항 수는 3개 이상 10,000개 이하입니다.
tickets의 각 행 [a, b]는 a 공항에서 b 공항으로 가는 항공권이 있다는 의미입니다.
주어진 항공권은 모두 사용해야 합니다.
만일 가능한 경로가 2개 이상일 경우 알파벳 순서가 앞서는 경로를 return 합니다.
모든 도시를 방문할 수 없는 경우는 주어지지 않습니다.

입출력 예
tickets	return
[[ICN, JFK], [HND, IAD], [JFK, HND]]	[ICN, JFK, HND, IAD]
[[ICN, SFO], [ICN, ATL], [SFO, ATL], [ATL, ICN], [ATL,SFO]]	[ICN, ATL, ICN, SFO, ATL, SFO]
입출력 예 설명
예제 #1

[ICN, JFK, HND, IAD] 순으로 방문할 수 있습니다.

예제 #2

[ICN, SFO, ATL, ICN, ATL, SFO] 순으로 방문할 수도 있지만 [ICN, ATL, ICN, SFO, ATL, SFO] 가 알파벳 순으로 앞섭니다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 해결 방법

* DFS
첫번째 문자열이 ICN 을 찾고 DFS 를 돌린다.
1. 뒷자리에 해당하는 문자가 다른 문자열의 첫번째 문자열과 같다
2. 방문하지 않았다.

판별 후 재귀를 돌림.
돌린 후, static vector<string> Result 와 Compare( 뒤에 오는 문자가 알파벳 순으로 먼저 오게 )

* BFS
넓이 탐색으로는 모든 경로를 다 돌 수 있는 경우의 수가 나오지 않을 수 있다.
BFS 는 그 조건에 해당하는 경우에만 queue 에 들어가기 때문에
조건에 해당하는 경우가 2가지 이상일 때,
첫번째 경우를 지나고 두번째 경우를 판별할 수가 없다.

나아가 BFS 를 이용해서 큐에 들어가는 경우의 수까지 고려하기엔 너무 복잡해진다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 시행착오

tickets 를 sort 하고 들어가면 1번 테케가 통과되었음.
2개 이상일 경우 알파벳 순서가 앞서는 경로를 return 하기 때문

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 다른 코드

#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

bool check[10001];


vector <string> answer;

bool dfs(string start, int cnt, int end_cnt, vector<vector<string>> tickets, vector<string> v) {

	if (cnt == end_cnt) {
		for (int i = 0; i < v.size(); i++) {
			answer.push_back(v[i]);
		}
		return true;
	}

	for (int i = 0; i < tickets.size(); i++) {
		if (start == tickets[i][0] && !check[i]) {
			check[i] = true;
			v.push_back(tickets[i][1]);
			bool result = dfs(tickets[i][1], cnt + 1, end_cnt, tickets, v);
			if (result)
				return true;
			check[i] = false;
			v.pop_back();
		}
	}

	return false;

}


vector<string> solution(vector<vector<string>> tickets) {

	sort(tickets.begin(), tickets.end()); //알파벳 순서대로 정렬
	string start = "ICN";

	answer.push_back(start);
	int cnt = 0;
	int end_cnt = tickets.size();

	vector <string> v;
	dfs(start, cnt, end_cnt, tickets, v);

	return answer;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






