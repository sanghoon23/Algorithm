/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//@ Programmers Algorithm - 2020 / 09 / 07
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 문제
- 문제이름 : 방문 길이

게임 캐릭터를 4가지 명령어를 통해 움직이려 합니다. 명령어는 다음과 같습니다.

U: 위쪽으로 한 칸 가기

D: 아래쪽으로 한 칸 가기

R: 오른쪽으로 한 칸 가기

L: 왼쪽으로 한 칸 가기

캐릭터는 좌표평면의 (0, 0) 위치에서 시작합니다.
좌표평면의 경계는 왼쪽 위(-5, 5), 왼쪽 아래(-5, -5), 오른쪽 위(5, 5), 오른쪽 아래(5, -5)로 이루어져 있습니다.

image

예를 들어, ULURRDLLU로 명령했다면

image

1번 명령어부터 7번 명령어까지 다음과 같이 움직입니다.
image

8번 명령어부터 9번 명령어까지 다음과 같이 움직입니다.
image

이때, 우리는 게임 캐릭터가 지나간 길 중 캐릭터가 처음 걸어본 길의 길이를 구하려고 합니다.
예를 들어 위의 예시에서 게임 캐릭터가 움직인 길이는 9이지만, 캐릭터가 처음 걸어본 길의 길이는 7이 됩니다.
(8, 9번 명령어에서 움직인 길은 2, 3번 명령어에서 이미 거쳐 간 길입니다)

단, 좌표평면의 경계를 넘어가는 명령어는 무시합니다.

예를 들어, LULLLLLLU로 명령했다면

image

1번 명령어부터 6번 명령어대로 움직인 후, 7, 8번 명령어는 무시합니다.
다시 9번 명령어대로 움직입니다.
image

이때 캐릭터가 처음 걸어본 길의 길이는 7이 됩니다.

명령어가 매개변수 dirs로 주어질 때,
** 게임 캐릭터가 처음 걸어본 길의 길이를 구하여 return 하는 solution 함수를 완성해 주세요. **

제한사항
dirs는 string형으로 주어지며, 'U', 'D', 'R', 'L' 이외에 문자는 주어지지 않습니다.
dirs의 길이는 500 이하의 자연수입니다.
입출력 예
dirs	answer
ULURRDLLU	7
LULLLLLLU	7

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 해결 방법

*제일 중요한 것은
(4,5) 에서 (3,5) 로 간 것과
(3,5) 에서 (4,5) 로 간 것은 동일하다.

1. Point 구조체 선언

2. 이차원 배열 선언.

3. for 문으로 dirs 돌면서 Point->bDown, Point->bRight 설정

4. 설정된 bDown, bRight 갯수 계산해주기.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 시행착오

처음에는 노드로 생각해서
int 이차원배열에서 Count 를 세어서 계산해보려했지만
애매해서 매우 복잡해지고
간선이 아닌 점의 갯수로 계산하려다보니 특정 상황들마다 값이 달라졌다.
예를 들어, "UDU" 상황, 그리고 if(Count갯수) 로 계산한다면 Answer 값이 -1, 혹은 +1 되어버리는 것 등
다양한 방법으로 했지만 풀지 못해서 방식을 완전히 바꾸었다.

한마디로, 엄청 고생했다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 다른 코드

* 이 코드는 pair 로 쌍을 지정해서
위에서 말한 (3,5) 에서 (4,5) ,, (4,5) 에서 (3,5) 는 같다는 걸 구별하면서
배열에 넣고 최종적으로 그 배열의 size 를 구한다.

속도는 내가 한 방식이 약간 빠르다.
//

#include <string>
#include <set>
using namespace std;
int toIdx(char ch){
    switch(ch){
        case 'R': return 0;
        case 'L': return 1;
        case 'U': return 2;
        case 'D': return 3;
    }
}
int solution(string dirs) {
    char ch;
    int answer = 0,i, x=0,y=0,ty,tx,dy[]={0,0,1,-1},dx[]={1,-1,0,0},idx,a,b;
    set<pair<int,int>> ans;
    for(i=0;i<dirs.length();i++) {
        ch = dirs[i];
        idx = toIdx(ch);
        tx = x + dx[idx], ty = y + dy[idx];
        if(!(-5 <= ty && ty <= 5 && -5 <= tx && tx <= 5)) continue;
        a = x*10000+y;
        x = tx, y = ty;
        b = x*10000+y;
        if(ans.find({a,b}) == ans.end() && ans.find({b,a}) == ans.end())
            ans.insert({a,b});
    }
    return answer = (int)ans.size();
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






