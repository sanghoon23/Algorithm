/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//@ Programmers Algorithm - 2020 / 07 / 16
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 문제
- 문제이름 : 징검다리

출발지점부터 distance만큼 떨어진 곳에 도착지점이 있습니다. 그리고 그사이에는 바위들이 놓여있습니다.
바위 중 몇 개를 제거하려고 합니다.
예를 들어, 도착지점이 25만큼 떨어져 있고,
바위가 [2, 14, 11, 21, 17] 지점에 놓여있을 때 바위 2개를 제거하면 출발지점, 도착지점, 바위 간의 거리가 아래와 같습니다.

제거한 바위의 위치	각 바위 사이의 거리	거리의 최솟값
[21, 17]	[2, 9, 3, 11]	2
[2, 21]	[11, 3, 3, 8]	3
[2, 11]	[14, 3, 4, 4]	3
[11, 21]	[2, 12, 3, 8]	2
[2, 14]	[11, 6, 4, 4]	4
위에서 구한 거리의 최솟값 중에 가장 큰 값은 4입니다.

출발지점부터 도착지점까지의 거리 distance, 바위들이 있는 위치를 담은 배열 rocks, 제거할 바위의 수 n이 매개변수로 주어질 때,
바위를 n개 제거한 뒤 각 지점 사이의 거리의 최솟값 중에 가장 큰 값을 return 하도록 solution 함수를 작성해주세요.


제한사항
도착지점까지의 거리 distance는 1 이상 1,000,000,000 이하입니다.
바위는 1개 이상 50,000개 이하가 있습니다.
n 은 1 이상 바위의 개수 이하입니다.
입출력 예
distance	rocks	n	return
25	[2, 14, 11, 21, 17]	2	4


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 해결 방법

1. 돌 간의 사이의 값을 구함.
첫번째 0, distance 의 값까지 같이 계산한 후 Calc 배열에 추가.

2. Start=1, End=distance 로 잡고 최솟값을 찾는다.

3. Mid 가 돌이 제거되었을 때 나올 수 있는 가장 큰 수라고 가정하고,
돌 사이 간격이 Mid 보다 작다면 제거 시킴. Count++;

4. 제거된 갯수(Count) 가 n(제거할 갯수) 보다 크다면 Mid 가 큰 값이므로
즉, 이 상황의 Mid 는 우리가 구하는 값이 아니라 End=Mid - 1 로 조정하고,
else 일 땐 Start=Mid + 1 로 놓고 Mid 를 Asnwer 로 잡는다.
즉, Mid 는 최댓값이 되는 최솟값이고, Start = Mid + 1 로 다음 Mid 값을 확인한다.

이 때, 우리가 구하려는 값은 최댓값이 되는 최솟값인 걸 명심하자.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 시행착오

사실 많이 어려웠다. 쉽지 않다.
솔직히 이분탐색 카테고리에 없었다면 나는 이 문제를 이분탐색이라고 생각하지 못할 거다.

기준이 바뀐다.
기존에 풀던 이분탐색의 기준은 어떤 컨테이너의 배열을 단축시키기 위해(찾는시간) 썼던 거라면,
이 문제는 한걸음 더 응용한 문제다.

먼저 우리가 구하려는 값은 뭔지 생각해보자.
우리는 바위를 제거했을 때, 생기는 거리의 최솟값이 최대인 것을 찾아야 한다.
저 최솟값이 최대인 값을 Mid 로 찾아야 함을 의미한다.
여기서 무엇과 비교해서 Left, Right 범위를 줄여갈 것인가.
문장 그대로, 바위를 제거했을 때 이다. 제거된 갯수를 비교해서 범위를 줄여간다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 느낀점

이 문제를 풀면서 느낀 것은
1. 기준을 잘 잡아야 함.
2. 무엇과 비교할 것인가.
이 두가지가 이분탐색 문제를 풀 경우, 재대로 풀 수 있는 관건인것 같다.

여기서 더 중요한 것은 위에서도 말했지만
과연, 나는 이 문제를 보고 이분탐색이라고 느끼고 풀 수 있는 것인가 인데..
잘 모르겠다..
하지만 지금 어떤 상황에서 쓸 수 있는지는 예시로 보았다. 그것만으로 큰 수확인 것 같다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






