/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//@ Programmers Algorithm - 2020 / 07 / 13
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 문제
- 문제이름 : 입국심사

n명이 입국심사를 위해 줄을 서서 기다리고 있습니다. 각 입국심사대에 있는 심사관마다 심사하는데 걸리는 시간은 다릅니다.

처음에 모든 심사대는 비어있습니다. 한 심사대에서는 동시에 한 명만 심사를 할 수 있습니다.
가장 앞에 서 있는 사람은 비어 있는 심사대로 가서 심사를 받을 수 있습니다.
하지만 더 빨리 끝나는 심사대가 있으면 기다렸다가 그곳으로 가서 심사를 받을 수도 있습니다.

모든 사람이 심사를 받는데 걸리는 시간을 최소로 하고 싶습니다.

입국심사를 기다리는 사람 수 n, 각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열 times가 매개변수로 주어질 때,
모든 사람이 심사를 받는데 걸리는 시간의 최솟값을 return 하도록 solution 함수를 작성해주세요.

제한사항
입국심사를 기다리는 사람은 1명 이상 1,000,000,000명 이하입니다.
각 심사관이 한 명을 심사하는데 걸리는 시간은 1분 이상 1,000,000,000분 이하입니다.
심사관은 1명 이상 100,000명 이하입니다.

입출력 예
n		times		return
6		[7, 10]		28
입출력 예 설명
가장 첫 두 사람은 바로 심사를 받으러 갑니다.

7분이 되었을 때, 첫 번째 심사대가 비고 3번째 사람이 심사를 받습니다.

10분이 되었을 때, 두 번째 심사대가 비고 4번째 사람이 심사를 받습니다.

14분이 되었을 때, 첫 번째 심사대가 비고 5번째 사람이 심사를 받습니다.

20분이 되었을 때, 두 번째 심사대가 비지만 6번째 사람이 그곳에서 심사를 받지 않고 1분을 더 기다린 후에
첫 번째 심사대에서 심사를 받으면 28분에 모든 사람의 심사가 끝납니다.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 해결 방법

1. 시간 문제로 이분탐색을 이용, 정렬 필요

2. Start, End 정의, Calc 변수 선언, 목표는 걸린 시간을 찾는 것.
시간의 최소는 1, 최대는 정렬된 제일 끝 Index

3. Calc 변수를 통해 Mid / times 를 값을 누적.

4. 여기서 while(Start < End) 로 
if (Calc >= n) End = Mid;
else if (Calc < n) Start = Mid + 1;

로 검사되어져 나온 직후의 값이 정답이므로, (Start <= End) 를 쓰지 않음.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 시행착오

처음엔 그냥 무작정 Timer 를 찾았는데, 너무 시간이 오래걸렸다. 그래서
이분탐색을 적용해서 풀어보니 굉장히 빨라졌다.

하지만 도중에
if(Calc == n) break; 이 부분에서,
예제에서의 답 28 이 나와야하는데 29 도 가능해져버리는 상황이 발생했다.
이 문제를 찾지 못해 굉장히 헤멨다.

또 마지막 8번케이스가 안됬는데,
처음 시작 End 부분을 아래와 같이 짜버렸다..
long long End = static_cast<long long>(times[times.size() - 1] * n);

무엇이 잘못되었나?



times[] * n 이 int 범위로 계산되어진 다음, long long 으로 변환된 것이다.. 정신 차려라ㅡㅡ;
( ) 괄호를 잘 쓰자.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






