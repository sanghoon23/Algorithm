/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//@ Programmers Algorithm - 2020 / 07 / 02
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 문제
- 문제이름 : 가장 먼 노드

n개의 노드가 있는 그래프가 있습니다. 각 노드는 1부터 n까지 번호가 적혀있습니다.
1번 노드에서 가장 멀리 떨어진 노드의 갯수를 구하려고 합니다.
가장 멀리 떨어진 노드란 최단경로로 이동했을 때 간선의 개수가 가장 많은 노드들을 의미합니다.

노드의 개수 n, 간선에 대한 정보가 담긴 2차원 배열 vertex가 매개변수로 주어질 때,
1번 노드로부터 가장 멀리 떨어진 노드가 몇 개인지를 return 하도록 solution 함수를 작성해주세요.

제한사항
노드의 개수 n은 2 이상 20,000 이하입니다.
간선은 양방향이며 총 1개 이상 50,000개 이하의 간선이 있습니다.
vertex 배열 각 행 [a, b]는 a번 노드와 b번 노드 사이에 간선이 있다는 의미입니다.
입출력 예
n	vertex														return
6	[[3, 6], [4, 3], [3, 2], [1, 3], [1, 2], [2, 4], [5, 2]]	3

입출력 예 설명
예제의 그래프를 표현하면 아래 그림과 같고, 1번 노드에서 가장 멀리 떨어진 노드는 4,5,6번 노드입니다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 해결 방법

1. BFS
방문할 Check, edge[i][0], edge[i][1] 가 해당 Value 라면 Que.push()

2. Value = 1 일 때, 계산하고
임시 Queue Temp 생성,

3. 기존의 !Que.empty() 일 때까지 Temp 에 데이터 넣고
Temp 가 비지 않았다면 Que 와 Swap

4. Answer = Que.size().

* BFS 를 이용해서 해당 Level(열) 의 끝까지 탐색하고 Que 에 담은 갯수가
가장 긴 Low Level 이다.
이 과정을 반복한다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 시행착오

BFS 를 이용해야 한다는 것은 본능적으로 느꼈다.
하지만 역시 코드로 옮기는게 쉽지 않다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 다른 코드

* 아래의 코드와는 속도차이가 조금 났다.
데이터가 많아질 때, 내가 짠 코드보다 2배정도 빨랐다.

BFS 방식 동일, 다만 DistanceArray 방식을 사용.

//********
//@Example
//...

int d[20001][20001];
bool visit[20001];
int dist[20001];
int solution(int n, vector<vector<int>> edge) {
    int max = 0;
    int answer = 0;
    for(int i=0;i<edge.size();i++)
    {
        d[edge[i][0]][edge[i][1]]=1;
        d[edge[i][1]][edge[i][0]]=1;
    }

    queue<int> q;
    visit[1]=true;
    q.push(1);
    dist[1]=0;
    while(!q.empty())
    {
        int first = q.front();
        q.pop();       
        for(int i=2;i<=n;i++)
        {
            if(d[first][i]==1 && !visit[i])
            {
                q.push(i);
                visit[i]=true;
                dist[i]=dist[first]+1;
                if(max<dist[i])
                {
                    max=dist[i];
                }
            }
        }
    }

    for(int i=1;i<=n;i++)
    {
        if(max==dist[i])
        {
            answer++;
        }
    }
    return answer;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






