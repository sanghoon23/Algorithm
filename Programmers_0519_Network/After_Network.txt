/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//@ Programmers Algorithm - 2020 / 05 / 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 문제
- 문제이름 : 네트워크

네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다.
예를 들어, 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고,
컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C도 간접적으로 연결되어 정보를 교환할 수 있습니다.
따라서 컴퓨터 A, B, C는 모두 같은 네트워크 상에 있다고 할 수 있습니다.

컴퓨터의 개수 n, 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때,
네트워크의 개수를 return 하도록 solution 함수를 작성하시오.

제한사항
컴퓨터의 개수 n은 1 이상 200 이하인 자연수입니다.
각 컴퓨터는 0부터 n-1인 정수로 표현합니다.
i번 컴퓨터와 j번 컴퓨터가 연결되어 있으면 computers[i][j]를 1로 표현합니다.
computer[i][i]는 항상 1입니다.
입출력 예
n	computers	return
3	[[1, 1, 0], [1, 1, 0], [0, 0, 1]]	2
3	[[1, 1, 0], [1, 1, 1], [0, 1, 1]]	1


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 해결 방법

1. Disjoint Set 방법

집합을 만드는 개념이다. 즉, 부모 노드로 묶는다고 생각하면 됨.
Marge, Find 개념을 이용함.

Parent Container 를 만들고, 각 원소 인덱스를 부모로 둔다.
그 다음 computer 의 이차원 배열을 돌면서,
이어질 원소들을 Marge.
만약 그 원소들이 처음으로 엮이는 거라면 값을 ++ 시키고,

*(아무것도 네트워크되어있는 않는 상태) 최대를 n 을 두고
처음 엮일 때 ++ 된 값을 뺀다면
네트워크의 개수가 나옴

/////////////////////////////////////////////////////////////////////

2. DFS 방법

computers[i][i] 의 원소를 이용함
만약 i 번째의 computers 를 방문하였다면, computers[i][i] == 0 으로 두고
다시 재귀를 탈 때, computers[0][0] == 0 이라면 false 를 리턴한다.

모두 다 엮였다면 처음 true 로 들어가고,
다음 돌때는 computers[i][i] == 0 이라, false 가 나옴

따라서, true 일때만 체크해서 ++Result 해준다면 총 네트워크 개수가 나옴.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 다른 코드


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






