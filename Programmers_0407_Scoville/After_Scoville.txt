/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//@ Programmers Algorithm - 2020 / 04 / 07
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 문제
- 문제이름 : 더 맵게 ( Scoville )

매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다. 
모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.

섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2)
Leo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.
Leo가 가진 음식의 스코빌 지수를 담은 배열 scoville과 원하는 스코빌 지수 K가 주어질 때, 
모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수를 return 하도록 solution 함수를 작성해주세요.

제한 사항
scoville의 길이는 1 이상 1,000,000 이하입니다.
K는 0 이상 1,000,000,000 이하입니다.
scoville의 원소는 각각 0 이상 1,000,000 이하입니다.
모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우에는 -1을 return 합니다.
입출력 예

scoville				K		return
[1, 2, 3, 9, 10, 12]	7			2

스코빌 지수가 1인 음식과 2인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.
새로운 음식의 스코빌 지수 = 1 + (2 * 2) = 5
가진 음식의 스코빌 지수 = [5, 3, 9, 10, 12]

스코빌 지수가 3인 음식과 5인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.
새로운 음식의 스코빌 지수 = 3 + (5 * 2) = 13
가진 음식의 스코빌 지수 = [13, 9, 10, 12]


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 해결 방법
1. 우선순위큐에 다 넣는다.
2. 섞기 위해선 2가지의 원소가 필요하므로, queue 의 size 가 2 이상이어야하고,
최솟값이 K 보다 크거나 같으면 성립된다.
3. while 돌리고 , Result 를 리턴하고, Min < K 라면 -1 리턴.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 시행착오
* 우선순위큐 는 비교조건이 Greater 이다. 즉, 기본적으로 큰 수 우선순위.
그래서 작은 수를 우선 순위를 두기 위해선 Compare 를 정의해야하는데, 
bool operator()(Type a, Type b) 를 사용하고, b 가 push되서 들어오는 비교되는 수 이다.
true 가 되면 끝에 삽입되지 않고 그 원소 위에 삽입되므로, a > b 가 되면 작은 수가 우선적으로 위로 올라간다.

아래 다른 코드에선 Compare 를 따로 정의하지 않고, 마이너스(-) 값을 집어넣어서 계산했다.
좋은 센스이지만, 좋은 습관은 아닌듯하다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 다른 코드

using namespace std;

int solution(vector<int> scoville, int K) {
    int answer = 0;
    priority_queue<int> sco;

    for(int i = 0 ; i < scoville.size() ; ++i)
        sco.push(-scoville[i]);

    while(sco.size() >= 2 && -sco.top() < K)
    {
        int mix1 = sco.top();
        sco.pop();
        int mix2 = sco.top()*2;
        sco.pop();

        sco.push(mix1+mix2);
        ++answer;
    }

    if(-sco.top() < K)
        answer = -1;

    return answer;
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






