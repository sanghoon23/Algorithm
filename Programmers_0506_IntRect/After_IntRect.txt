/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//@ Programmers Algorithm - 2020 / 05 / 07
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 문제
- 문제이름 : 정수 삼각형

위와 같은 삼각형의 꼭대기에서 바닥까지 이어지는 경로 중,
거쳐간 숫자의 합이 가장 큰 경우를 찾아보려고 합니다.
아래 칸으로 이동할 때는 대각선 방향으로 한 칸 오른쪽 또는 왼쪽으로만 이동 가능합니다.
예를 들어 3에서는 그 아래칸의 8 또는 1로만 이동이 가능합니다.

삼각형의 정보가 담긴 배열 triangle이 매개변수로 주어질 때,
거쳐간 숫자의 최댓값을 return 하도록 solution 함수를 완성하세요.

제한사항
삼각형의 높이는 1 이상 500 이하입니다.
삼각형을 이루고 있는 숫자는 0 이상 9,999 이하의 정수입니다.

입출력 예
			triangle	result
			[7]
			[3, 8]
			[8, 1, 0]
			[2, 7, 4, 4]
			[4, 5, 2, 6, 5]]	30


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 해결 방법

Dynamic programming 이란 무엇일까?
메모리제이션 즉, 기억하기 이다.
기본적으로 분할 정복과 같은 방식인데 차이점은
한번만 계산하고 저장해둬 재활용해서 사용한다는 점이다.

이런 개념들을 이 문제에 적용해보면,

각 트리에서 내려온 값이 최대값을 찾는 문제이다.
언뜻보면 , 재귀를 이용한 DPS 깊이탐색을 써도 될 듯한데,
DPS 를 쓰면 너무 너무 복잡해진다.

DPS 를 쓰기 적합한 때에는 
위 예시 에서 4번째 줄 2 에서
2->4, 2->5, 2->2, 2->6, 2->5 
모든 수를 다 거칠 때 쓰기 매우 좋다.
하지만, 이 정삼각형 숫자들은 트리 구조이다.
2->4, 2->5, 까지 들렀다가 다시 8까지 돌아가서 7로 들어간 후, 7->5, 7->2 를 구해야되는데,
DPS 로 가능하긴 할까??
또한, 같은값을 두 번 이상 계산할 일이 빈번하다.

어쨌든, 이러한 이유로 DPS(재귀) 가 아닌
DP 를 이용하면
들어온 Input 2차원배열을 돌면서 따로 두 수의 합을 저장할 Sum 을 만들고
각 행열에 해당하는 데이터의 합들을 계산해서 집어넣었다.

*여기서 주의할 점은
첫번째와 마지막번째는 그냥 이전꺼의 수와 현재 인덱스의 수를 합하면되지만,
중간에 해당하는 부분은 이전 두 부분의 합 의 최대값
즉, [j-1][i-1], [j-1][i] 중의 제일 큰 값을 더하면
해당 라인의 최대값을 구할 수 있다.

쭉 실행한 후,
마지막 번째의 줄에서 Max 값을 찾는다면 최종적으로 최대로 클 수 있는 값이 나온다.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 시행착오

사실 방법은 맞았는데,
Index 해깔린거,
그리고

이차원배열 생성할 때, 
1. int** Sum = new int*[Height]; <<-- 틀림
2. int** Sum = new int*[Height]();
원래라면 2번 방식이다.

그런데 비쥬얼에선 1, 2번 모두 다 컴파일이 되고,
코딩페이지 컴파일러에선 오류는 아니지만 알 수 없는 값이 들어온다.
이것 때문에 한참을 헤맸다;;
new int(); 가로 꼭 쓰자. 반성하자


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 느낀점

DP 가 어떤 방법인지 확실히 인지하였다. 기분이 좋다.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






