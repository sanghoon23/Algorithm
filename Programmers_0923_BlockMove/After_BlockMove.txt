/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//@ Programmers Algorithm - 2020 / 09 / 25
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 문제
- 문제이름 : 블록 이동하기.

로봇개발자 무지는 한 달 앞으로 다가온 카카오배 로봇경진대회에 출품할 로봇을 준비하고 있습니다.
준비 중인 로봇은 2 x 1 크기의 로봇으로 무지는 0과 1로 이루어진 N x N 크기의 지도에서
2 x 1 크기인 로봇을 움직여 (N, N) 위치까지 이동 할 수 있도록 프로그래밍을 하려고 합니다.
로봇이 이동하는 지도는 가장 왼쪽, 상단의 좌표를 (1, 1)로 하며 지도 내에 표시된 숫자 0은 빈칸을 1은 벽을 나타냅니다.
로봇은 벽이 있는 칸 또는 지도 밖으로는 이동할 수 없습니다. 로봇은 처음에 아래 그림과 같이 좌표 (1, 1) 위치에서 가로방향으로 놓여있는 상태로 시작하며,
앞뒤 구분없이 움직일 수 있습니다.

블럭이동-1.jpg

로봇이 움직일 때는 현재 놓여있는 상태를 유지하면서 이동합니다.
예를 들어, 위 그림에서 오른쪽으로 한 칸 이동한다면 (1, 2), (1, 3) 두 칸을 차지하게 되며,
아래로 이동한다면 (2, 1), (2, 2) 두 칸을 차지하게 됩니다. 로봇이 차지하는 두 칸 중 어느 한 칸이라도 (N, N) 위치에 도착하면 됩니다.

로봇은 다음과 같이 조건에 따라 회전이 가능합니다.

블럭이동-2.jpg

위 그림과 같이 로봇은 90도씩 회전할 수 있습니다. 단, 로봇이 차지하는 두 칸 중, 어느 칸이든 축이 될 수 있지만,
회전하는 방향(축이 되는 칸으로부터 대각선 방향에 있는 칸)에는 벽이 없어야 합니다.
로봇이 한 칸 이동하거나 90도 회전하는 데는 걸리는 시간은 정확히 1초 입니다.

0과 1로 이루어진 지도인 board가 주어질 때, 로봇이 (N, N) 위치까지 이동하는데 필요한 최소 시간을 return 하도록 solution 함수를 완성해주세요.

제한사항
board의 한 변의 길이는 5 이상 100 이하입니다.
board의 원소는 0 또는 1입니다.
로봇이 처음에 놓여 있는 칸 (1, 1), (1, 2)는 항상 0으로 주어집니다.
로봇이 항상 목적지에 도착할 수 있는 경우만 입력으로 주어집니다.
입출력 예
board	result
[[0, 0, 0, 1, 1],[0, 0, 0, 1, 0],[0, 1, 0, 1, 1],[1, 1, 0, 0, 1],[0, 0, 0, 0, 0]]	7
입출력 예에 대한 설명
문제에 주어진 예시와 같습니다.
로봇이 오른쪽으로 한 칸 이동 후, (1, 3) 칸을 축으로 반시계 방향으로 90도 회전합니다.
다시, 아래쪽으로 3칸 이동하면 로봇은 (4, 3), (5, 3) 두 칸을 차지하게 됩니다.
이제 (5, 3)을 축으로 시계 방향으로 90도 회전 후, 오른쪽으로 한 칸 이동하면 (N, N)에 도착합니다.
따라서 목적지에 도달하기까지 최소 7초가 걸립니다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 해결 방법

*BFS 를 이용한 단계별 가능한 곳 찾기.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 시행착오 & 느낀점

*DFS 를 쓰는 것과 무슨 차이인가??
먼저 DFS 는 모든 경우의 수를 다 방문하는 방법이다. 보통 재귀, 스택를 사용 (모든 경우의 수를 비교해야할 때,)
BFS 는 트리의 깊이에서 가능한 것을 큐에 집어넣고 다시 확인 즉, 단계적으로 확인하는 방법이다. 보통 큐컨테이너를 사용
모든 곳을 다 거친다고 가정했을 때, BFS 와는 동일하지만 방식에서 차이가 있다.
이 경우 목표 지점 n*n 에 도착할 최소한의 수를 구하는 것인데
DFS 를 사용하면, 최소한의 수를 구하는 것을 넘어서 모든 경우의 수를 다 돌기 때문에 시간적으로 매우 많이 걸린다.
하지만 BFS 를 사용하면 모든 경우의 수를 다 살펴보지 않고 가능한 경우(이동,회전했을 때, 벽이 없거나, 방문하지 않았거나) 를
다시 큐에 넣기 때문에 DFS 보다 상대적으로 빠르다.
모든 경우의 수를 비교하지 않아도 된다. 우린 최소단계만 찾으면 해결된다.

사실 DFS 로도 구현이 가능하다. 하지만 복잡하고 시간이 오래걸리고 디버깅이 쉽지 않을 것이다.

알고리즘 문제를 풀 땐, 시간도 굉장히 중요한 것을 매우 느꼈다.
어떤 문제를 어떤 효율적인 알고리즘을 사용하느냐에 따라서 시간차이가 난다. 어떻게 빠르게 풀 수 있는지 고민해야 한다.




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 다른 코드


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






