/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//@ Programmers Algorithm - 2020 / 06 / 09
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 문제
- 문제이름 : 가장 큰 수

0 또는 양의 정수가 주어졌을 때, 정수를 이어 붙여 만들 수 있는 가장 큰 수를 알아내 주세요.

예를 들어, 주어진 정수가 [6, 10, 2]라면 [6102, 6210, 1062, 1026, 2610, 2106]를 만들 수 있고,
이중 가장 큰 수는 6210입니다.

0 또는 양의 정수가 담긴 배열 numbers가 매개변수로 주어질 때,
순서를 재배치하여 만들 수 있는 가장 큰 수를 문자열로 바꾸어 return 하도록 solution 함수를 작성해주세요.

제한 사항
numbers의 길이는 1 이상 100,000 이하입니다.
numbers의 원소는 0 이상 1,000 이하입니다.
정답이 너무 클 수 있으니 문자열로 바꾸어 return 합니다.
입출력 예
numbers	return
[6, 10, 2]	6210
[3, 30, 34, 5, 9]	


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 해결 방법

* sort 내림차순,
Compare - stringA + stringB , stringB + stringA 를 비교

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 시행착오

처음 풀었던 방식
pow(10, i) 를 이용해서 a 를 나누고 배열에 집어넣는다
b 도 마찬가지 방식으로 배열에 집어넣는다.

각 첫번째 숫자를 비교,
만약 같다면 다음번째 숫자를 비교하는데,

Ex) 숫자 3, 34 라면
TempA = { 3 }
TempB = { 3, 4 } 순으로 들어가있다.

3 == 3 비교, 3 == 4 비교하는 식으로 while 문을 돌렸다.
이런식으로 하다보니 너무 복잡했다..
또, 발견하지 못한 예외가 존재했다.

예외를 찾으려고 다른 분들 테스트케이스를 보던 도중 A + B, B + A 방식이 있다는 걸 알고 바로 짜버렸다..
정말 방법이 중요하다는 걸 다시 한번 느꼈다.

답을 찾는 과정에서 한번에 쉽고 편한 과정을 찾기란 매우 어려운 것 같다.
좀 더 유연하게 생각해야겠다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 느낀점

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 다른 코드


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






