/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//@ HakerRanks Algorithm - 2020 / 01 / 20
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 문제
OrganizingContainerOfBall

- 용기에 같은 Type 의 숫자만 넣는 것이 가능한지, Impossible, Possible 을 return 해라.

q = 경우의 수 (case)
n = 행렬의 자릿수.
container = 행렬의 n 차원 배열

EX)
Input 값이 
2
2
1, 1
1, 1
2
0, 2
1, 1
일 때,


			Type
container	0	1
		0	1	1	
		1	1	1


			Type
container	0	1
		0	0	2
		1	1	1		

Swap 은 무제한 할 수 있다
조건
1. swap 할 두 개의 수는 서로 달라야한다.
2. 각 container 에 담아진 숫자는 모두 같은 타입이어야 한다.

이 때, Container 에 같은 Type 에 숫자가 담아질 수 있는지, 문자열로 출력해라.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 해결 방법

1. list<int> 행, list<int> 열
2. 행마다 더한 값을 리스트에, 열마다 더한 값을 리스트에,
3. 행과 열의 값들이 서로 같이 매칭되면 Possible, 아니면 Impossible


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 시행착오

이번 문제는 시행착오는 없었다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 느낀점

이 문제를 풀면서 알고리즘에 관해서 깊게 생각할 수 있는 계기가 되었다.
알고리즘엔 항상 어떤 규칙이나 패턴이 존재한다고 생각한다.
하나로 관통하는 어떤 규칙이나 패턴은 분기를 짧게 만들고 속도도 향상된다.
그래서 문제에서 만족할 수 있는 법칙을 찾는것이 중요하다고 생각했다.
물론 전에 풀었던 퀸의 문제처럼, 애매모호한 분기와 규칙들은 이도저도 아닌것이 된다.
또한, 정말 무식한 방법이 때로는 최선도 될 수 있는 것이 알고리즘이라 생각한다.
항상 목적을 잃어버리지 않으면서 규칙을 찾으려 애써야겠다.
이 문제를 풀다가도 중간에 이상한 길로 빠질려고 했었지만, 다시 문제를 훑었다.
그래서 시간은 좀 오래걸렸지만, 생각한대로 한번에 풀 수 있었다.
한마디로 내 멋대로 알고리즘을 정의한다면,
" 주어진 데이터로 결과를 달성할 수 있는 최선의 규칙을 선택하는 것 " 이라고 말하겠다.



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






