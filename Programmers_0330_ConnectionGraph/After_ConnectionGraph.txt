/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//@ Programmers Algorithm - 2020 / 03 / 30
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 문제
- 문제이름 : 섬 연결하기.

문제 설명
n개의 섬 사이에 다리를 건설하는 비용(costs)이 주어질 때, 
" 최소의 비용 " 으로 모든 섬이 서로 통행 가능하도록 만들 때 필요한 최소 비용을 return 하도록 solution을 완성하세요.

다리를 여러 번 건너더라도, 도달할 수만 있으면 통행 가능하다고 봅니다. 예를 들어 A 섬과 B 섬 사이에 다리가 있고, B 섬과 C 섬 사이에 다리가 있으면 A 섬과 C 섬은 서로 통행 가능합니다.

제한사항

섬의 개수 n은 1 이상 100 이하입니다.
costs의 길이는 ((n-1) * n) / 2이하입니다.
임의의 i에 대해, costs[i][0] 와 costs[i] [1]에는 다리가 연결되는 두 섬의 번호가 들어있고, costs[i] [2]에는 이 두 섬을 연결하는 다리를 건설할 때 드는 비용입니다.
같은 연결은 두 번 주어지지 않습니다. 또한 순서가 바뀌더라도 같은 연결로 봅니다. 즉 0과 1 사이를 연결하는 비용이 주어졌을 때, 1과 0의 비용이 주어지지 않습니다.
모든 섬 사이의 다리 건설 비용이 주어지지 않습니다. 이 경우, 두 섬 사이의 건설이 불가능한 것으로 봅니다.
연결할 수 없는 섬은 주어지지 않습니다.

입출력 예

n	costs										return
4	[[0,1,1],[0,2,2],[1,2,5],[1,3,1],[2,3,8]]	4

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 해결 방법

*MST 이용, ( 최소 신장 트리 )
Kruskal Algorithm 사용.

1. priority_queue 를 사용
2. Union_Find -> Disjointed Set
- 서로소 집합, 또는 병합 찾기 집합 이라고 불리며
여러 서로소 집합의 정보를 저장하고 있는 자료구조.
각각의 원소들이 어떤 원소들과 연결되어있는지.
Ex)
(1-2, 2-5, 5-6, 5-8, 3-4) 라면,
1-2-5-6-8,  3-4 , 로 구분되어질 수 있다. 
즉, " 최상단 노드인 Root 노드를 집합을 구분하는 ID 처럼 생각 "
출처 - https://twpower.github.io/115-union-find-disjoint-set

이로써, 순환되지 않는 구조를 만들 수 있다.

3. 모든 간선들을 우선순위 큐에 담고
4. bool Union(v1, v2) 값을 받아서 순환되지않을 경우에만 Result+= 해주고 구한다.

---------------------------------------------------------------------
@Prim 알고리즘도 가능.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 시행착오

MST 문제라고 생각하지 않고 풀다가,, 막혔다..
무턱대고 짜다보니 너무 복잡해졌다..

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 느낀점

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// * 다른 코드

엄청난 코드는 없었다. 비슷했다.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






